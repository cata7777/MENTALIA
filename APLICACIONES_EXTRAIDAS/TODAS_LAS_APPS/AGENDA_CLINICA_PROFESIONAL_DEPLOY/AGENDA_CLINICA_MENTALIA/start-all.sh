#!/bin/bash

echo "üè• Iniciando AGENDA CL√çNICA INTEROPERABLE ND"
echo "==========================================="

# Verificar si Node.js est√° instalado
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js no est√° instalado. Por favor instala Node.js primero."
    exit 1
fi

# Verificar si npm est√° instalado
if ! command -v npm &> /dev/null; then
    echo "‚ùå npm no est√° instalado. Por favor instala npm primero."
    exit 1
fi

echo "‚úÖ Node.js y npm detectados"

# Instalar dependencias del frontend
echo "üì¶ Instalando dependencias del frontend..."
cd frontend
if [ ! -d "node_modules" ]; then
    npm install
    if [ $? -ne 0 ]; then
        echo "‚ùå Error instalando dependencias del frontend"
        exit 1
    fi
fi

# Instalar dependencias del backend
echo "üì¶ Instalando dependencias del backend..."
cd ../backend
if [ ! -d "node_modules" ]; then
    npm install
    if [ $? -ne 0 ]; then
        echo "‚ùå Error instalando dependencias del backend"
        exit 1
    fi
fi

echo "‚úÖ Dependencias instaladas correctamente"

# Iniciar backend en segundo plano
echo "üöÄ Iniciando backend Agenda Cl√≠nica en puerto 5003..."
node server.js &
BACKEND_PID=$!

# Esperar un momento para que el backend se inicie
sleep 3

# Verificar si el backend est√° funcionando
if curl -s http://localhost:5003/api/health > /dev/null; then
    echo "‚úÖ Backend Agenda Cl√≠nica iniciado correctamente"
else
    echo "‚ùå Error iniciando backend Agenda Cl√≠nica"
    kill $BACKEND_PID 2>/dev/null
    exit 1
fi

# Iniciar frontend
echo "üé® Iniciando frontend Agenda Cl√≠nica en puerto 5173..."
cd ../frontend
npm run dev -- --host &
FRONTEND_PID=$!

echo ""
echo "üéâ AGENDA CL√çNICA INTEROPERABLE ND iniciada exitosamente!"
echo "======================================================="
echo "üåê Frontend: http://localhost:5173"
echo "üîß Backend:  http://localhost:5003"
echo "üìä Health:   http://localhost:5003/api/health"
echo ""
echo "üè• M√≥dulos cl√≠nicos disponibles:"
echo "   ‚Ä¢ Gesti√≥n de Pacientes - Historiales neurodivergentes"
echo "   ‚Ä¢ Agenda Inteligente - Programaci√≥n optimizada"
echo "   ‚Ä¢ Telemedicina - Consultas virtuales"
echo "   ‚Ä¢ Reportes Cl√≠nicos - Documentaci√≥n autom√°tica"
echo "   ‚Ä¢ Seguimiento de Tratamientos - Evoluci√≥n de pacientes"
echo "   ‚Ä¢ An√°lisis de Datos - M√©tricas cl√≠nicas"
echo "   ‚Ä¢ Configuraci√≥n - Personalizaci√≥n del sistema"
echo "   ‚Ä¢ Interoperabilidad - Integraci√≥n con otros sistemas"
echo ""
echo "üß† Especializaci√≥n neurodivergente:"
echo "   ‚Ä¢ TDAH - Seguimiento de medicaci√≥n y terapias"
echo "   ‚Ä¢ TEA - Planes de intervenci√≥n personalizados"
echo "   ‚Ä¢ Dislexia - Evaluaciones y seguimiento acad√©mico"
echo "   ‚Ä¢ Ansiedad - Monitoreo de s√≠ntomas"
echo "   ‚Ä¢ Depresi√≥n - Seguimiento de estado de √°nimo"
echo "   ‚Ä¢ Neurotipos Combinados - Abordaje integral"
echo ""
echo "Presiona Ctrl+C para detener ambos servicios"

# Funci√≥n para limpiar procesos al salir
cleanup() {
    echo ""
    echo "üõë Deteniendo servicios Agenda Cl√≠nica..."
    kill $BACKEND_PID 2>/dev/null
    kill $FRONTEND_PID 2>/dev/null
    echo "‚úÖ Servicios Agenda Cl√≠nica detenidos"
    exit 0
}

# Capturar se√±al de interrupci√≥n
trap cleanup SIGINT SIGTERM

# Mantener el script ejecut√°ndose
wait

